package P1Lab1LombeidaAna;

import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.Scanner;

public class main {

	 // Variables globales para almacenar datos de las opciones 1 y 2
    private static int cantidad;
 
    private static String[] nombres;
    private static String[] nombresAscendente;
    private static String[] nombresDescendente;

     
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		  Scanner scanner = new Scanner(System.in);
	        int menuOp = 0;

	        do {
	            System.out.println("==============================================");
	            System.out.println("MENU DE OPCIONES");
	            System.out.println("1. INGRESAR DATOS Y APLICAR FORMULAS DEL IVA");
	            System.out.println("2. INGRESAR ARREGLOS DE NOMBRES Y ORDENAR");
	            System.out.println("3. GUARDAR INFORMACION EN UN ARCHIVO");
	            System.out.println("4. SALIR");
	            System.out.println("INGRESA UNA OPCION");
	            System.out.println("==============================================");
	            menuOp = scanner.nextInt();

	            switch (menuOp) {
	                case 1:
	                	RegristroMedicos();
	                	DatosAnimales();
	                	programarCitasMedicas();
	                    break;

	                case 2:
	                	ArreglosNombres();

	                    break;

	                case 3:
	                    System.out.println("3. GUARDAR INFORMACION EN UN ARCHIVO CSV");
	                    guardarInformacionTXT();
	                    break;

	                case 4:
	                    System.out.println("4. MUCHASD GRACIAS, QUE TENGA UN BUEN DIA ");
	                    break;

	                default:
	                    System.out.println("OPCION INGRESADA ES INCORRECTA, VUELVA A INGRESAR UNA DENTRO DEL RANGO");
	            }

	        } while (menuOp != 5);

	    }
		
	  // Método para guardar información en un archivo CSV
    private static void guardarInformacionCSV() {
        // Verifica que nombresAscendente y nombresDescendente no sean nulos antes de guardarlos
        if (nombresAscendente == null || nombresDescendente == null) {
            System.out.println("No se puede guardar la información porque los nombres ordenados no se han inicializado.");
            return;
        }

        try (FileWriter writer = new FileWriter("informacion_guardada.csv")) {
            // Guardar información de la opción 1
          

            // Guardar información de la opción 2
            writer.write("Opción 2:\n");
            writer.write("Nombres en orden ascendente:\n");
            for (String nombre : nombresAscendente) {
                writer.write(nombre + "\n");
            }
            writer.write("\nNombres en orden descendente:\n");
            for (String nombre : nombresDescendente) {
                writer.write(nombre + "\n");
            }

            System.out.println("La información se ha guardado correctamente en 'informacion_guardada.csv'.");
        } catch (IOException e) {
            System.out.println("Error al guardar la información en el archivo CSV: " + e.getMessage());
        }
    }

    // Métodos de ordenamiento burbuja en orden ascendente y descendente
    public static void ordenarNombresAscendente(String[] nombres) {
        int cantidad = nombres.length;
        for (int i = 0; i < cantidad - 1; i++) {
            for (int j = 0; j < cantidad - i - 1; j++) {
                if (nombres[j].compareTo(nombres[j + 1]) > 0) {
                    // Intercambiar nombres[j] y nombres[j + 1]
                    String temp = nombres[j];
                    nombres[j] = nombres[j + 1];
                    nombres[j + 1] = temp;
                }
            }
        }
    }

    public static void ordenarNombresDescendente(String[] nombres) {
        int cantidad = nombres.length;
        for (int i = 0; i < cantidad - 1; i++) {
            for (int j = 0; j < cantidad - i - 1; j++) {
                if (nombres[j].compareTo(nombres[j + 1]) < 0) {
                    // Intercambiar nombres[j] y nombres[j + 1]
                    String temp = nombres[j];
                    nombres[j] = nombres[j + 1];
                    nombres[j + 1] = temp;
                }
            }
        }
    }
    
    
    
    
////////METODO PARA EL ARREGLO DE NOMBRES 
    
public static void ArreglosNombres(){
        Scanner scanner  = new Scanner(System.in);

 do {
                 System.out.println("INGRESA LA CANTIDAD DE NOMBRES A INGRESAR");
  	         cantidad = scanner.nextInt();
  	         scanner.nextLine(); // Limpiar el buffer de entrada
                     if(cantidad<=0 || cantidad >=10 ) {
                     }	
                 }while(cantidad<=0 || cantidad >=10 );
                  
                    // Crear el arreglo de nombres
                    nombres = new String[cantidad];

                    // Llenar el arreglo de nombres
                    for (int i = 0; i < cantidad; i++) {
                        System.out.println("INGRESE EL NOMBRE " + (i + 1) + ": ");
                        nombres[i] = scanner.nextLine();
                    }

                    // Ordenar los nombres utilizando el método de burbuja de forma ascendente
                    ordenarNombresAscendente(nombres);
                    nombresAscendente = Arrays.copyOf(nombres, nombres.length);

                    // Mostrar los nombres ordenados de forma ascendente
                    System.out.println("\nNombres ordenados en forma ascendente:");
                    for (String nombre : nombresAscendente) {
                        System.out.println(nombre);
                    }

                    // Ordenar los nombres utilizando el método de burbuja de forma descendente
                    ordenarNombresDescendente(nombres);
                    nombresDescendente = Arrays.copyOf(nombres, nombres.length);

                    // Mostrar los nombres ordenados de forma descendente
                    System.out.println("\nNombres ordenados en forma descendente:");
                    for (String nombre : nombresDescendente) {
                        System.out.println(nombre);
                    }
}


public static void RegristroMedicos(){
    Scanner scanner = new Scanner (System.in);
    int CantMedicos;
        // Solicita la cantidad de médicos veterinarios hasta que se ingrese un numero valido
        do {
            System.out.println("INGRESA LA CANTIDAD DE MEDICOS VETERINARIOS A INGRESAR (máximo 10):");
            CantMedicos = scanner.nextInt();
             scanner.nextLine();
            if (CantMedicos < 0 || CantMedicos > 10) {
                System.out.println("ERROR:LA CANTIDAD DEBE DE ESTAR ENTRE (0-10)INTENTE NUEVAMENTE.");
            }
        } while (CantMedicos < 0 || CantMedicos > 10);

        // Inicializa el arreglo de médicos veterinarios con la cantidad especificada
        MedicoVeterinario[] veterinarios = new MedicoVeterinario[CantMedicos];

        // Pide la información de cada médico veterinario
        for (int i = 0; i < CantMedicos; i++) {
            System.out.println("=========================================================");
            System.out.println("\nINGRESE LOS DATOS DEL MEDICO VETERINARIO " + (i + 1) + ":");
            System.out.println("=========================================================");

            /////////DATOS DEL MEDICO
            System.out.print("INGRESE EL NOMBRE : ");
            String nombre = scanner.next();
            System.out.print("INGRESE EL APELIIDO : ");
            String apellido = scanner.next();
            int edad;
            do {
                System.out.print("INGRESE LA EDAD (debe ser mayor a 18  y estar en el rango de 50 años): ");
                edad = scanner.nextInt();
                if (edad <= 18||edad>=50) {
                    System.out.println("ERROR: La EDAD DEBE SER MAYOR A 18. INTENTE DE NUEVO.");
                }
            } while (edad <= 18||edad>=50);

            System.out.print("INGRESE LA ESPECIALIDAD: ");
            String especialidad = scanner.next();
            // Valida que el sexo sea 'M' para masculino o 'F' para femenino
            String sexo;
            do {
                System.out.print("INGRESE EL SEXO (M para masculino, F para femenino): ");
                sexo = scanner.next().toUpperCase();
                if (!sexo.equals("M") && !sexo.equals("F")) {
                    System.out.println("ERROR: INGRESE 'M' PARA MASCULINO O 'F' PARA FEMENINO. INTENTA NUEVAMENTE.");
                }
            } while (!sexo.equals("M") && !sexo.equals("F"));

            // Crea un objeto MedicoVeterinario con los datos ingresados
            veterinarios[i] = new MedicoVeterinario(nombre, apellido, edad, especialidad, sexo);
        }

        // MUESTRA LOS DATOS DEL MEDICO VETERINARIO
        System.out.println("\n=============================================:");
        System.out.println("\nDATOS DE LOS MEDICOS REGISTRADOS             :");
        System.out.println("\n=============================================:");
        for (int i = 0; i < CantMedicos; i++) {
            System.out.println("\nMEDICOS VETERINARIOS" + (i + 1) + ":");
            veterinarios[i].mostrarDatos();
        }
    
    }
    
    
    public static void DatosAnimales(){

   Scanner scanner = new Scanner (System.in);
    int CantAnimales;

        // Solicita la cantidad de animales
        do {
            System.out.println("INGRESA LA CANTIDAD DE ANIMALES A INGRESAR (máximo 10):");
            CantAnimales = scanner.nextInt();
             scanner.nextLine();
            if (CantAnimales < 0 || CantAnimales > 10) {
                System.out.println("ERROR:LA CANTIDAD DEBE DE ESTAR ENTRE (0-10)INTENTE NUEVAMENTE.");
            }
        } while (CantAnimales < 0 || CantAnimales> 10);

        Animales [] animales= new  Animales [ CantAnimales ];
        
          // Pide la información de cada animal 
        for (int i = 0; i < CantAnimales; i++) {
            System.out.println("=========================================================");
            System.out.println("\nINGRESE LOS DATOS DEL ANIMAL             " + (i + 1) + ":");
            System.out.println("=========================================================");

            /////////DATOS DEL ANIMAL
            System.out.println("INGRESE EL TIPO DE ANIMAL: ");
            String TipoAnimal = scanner.nextLine();
            System.out.println("INGRESE EL NOMBRE  : ");
            String name = scanner.nextLine();
            System.out.println("INGRESE LA ESPECIE  : ");
            String species = scanner.nextLine();
            int age;
            
            do {
                System.out.print("INGRESE LA EDAD (debe ser mayor a 0  y estar en el rango de 50 años): ");
                age = scanner.nextInt();
                if (age <=0||age>=20) {
                    System.out.println("ERROR: La EDAD DEBE SER MAYOR A 0. INTENTE DE NUEVO.");
                }
            } while (age <= 0||age>=20);
            System.out.print("INGRESE LA RAZA: ");
            String breed = scanner.nextLine();
            // Valida que el sexo sea 'M' para masculino o 'F' para femenino
            String  gender;
            do {
                System.out.print("INGRESE EL SEXO (M para masculino, F para femenino): ");
                 gender = scanner.next().toUpperCase();
                if (! gender.equals("M") && ! gender.equals("F")) {
                    System.out.println("ERROR: INGRESE 'M' PARA MASCULINO O 'F' PARA FEMENINO. INTENTA NUEVAMENTE.");
                }
            } while (! gender.equals("M") && ! gender.equals("F"));

            // Crea un objeto Animales  con los datos ingresados
            animales[i] = new Animales(TipoAnimal, name,species,age,breed,gender);
        }

        // MUESTRA LOS DATOS DE LOS ANIMALES
        System.out.println("\n=============================================:");
        System.out.println("\nDATOS DE LOS ANIMALES REGRISTARDOS           :");
        System.out.println("\n=============================================:");
        for (int i = 0; i < CantAnimales; i++) {
            System.out.println("\nANIMALES" + (i + 1) + ":");
            animales[i].mostrarDatos();
        }
    
    }
    
 public static void programarCitasMedicas() {
        Scanner scanner = new Scanner(System.in);

        // Solicitar la fecha y hora de la cita
        System.out.print("Ingrese la fecha de la cita (formato: yyyy-mm-dd): ");
        String fecha = scanner.nextLine();
        System.out.print("Ingrese la hora de la cita (formato: hh:mm): ");
        String hora = scanner.nextLine();
        // Combina fecha y hora en un LocalDateTime
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
        LocalDateTime fechaHora = LocalDateTime.parse(fecha + " " + hora, dateFormatter);
        CitaMedica nuevaCita = new CitaMedica(fechaHora);
        nuevaCita.mostrarDatos();
    }
 
 
 
//Método para guardar información en un archivo de texto (opción 3)
 public static void guardarInformacionTXT() {
     try (FileWriter writer = new FileWriter("informacion.txt")) {
         // Guardar nombres ordenados de la opción 2
         writer.write("Nombres en orden ascendente:\n");
         for (String nombre : nombresAscendente) {
             writer.write(nombre + "\n");
         }

         writer.write("\nNombres en orden descendente:\n");
         for (String nombre : nombresDescendente) {
             writer.write(nombre + "\n");
         }

         // Guardar información de los médicos veterinarios de la opción 1
         writer.write("\nMédicos veterinarios:\n");
         Iterable<MedicoVeterinario> veterinarios = null;
         for (MedicoVeterinario medico :veterinarios) {
             writer.write(medico.getNombre() + "," + medico.getApellido() + "," + medico.getEdad() + "," + medico.getEspecialidad() + "," + medico.getSexo() + "\n");
         }

         System.out.println("La información se ha guardado correctamente en 'informacion.txt'.");
     } catch (IOException e) {
         System.out.println("Error al guardar la información: " + e.getMessage());
     }
 }
}
 



class MedicoVeterinario {
    // Atributos de la clase MedicoVeterinario
    private String nombre;
    private String apellido;
    private int edad;
    private String especialidad;
    private String sexo;

    // Constructor para inicializar un objeto MedicoVeterinario
    public MedicoVeterinario(String nombre, String apellido, int edad, String especialidad, String sexo) {
        this.nombre = nombre;
        this.apellido = apellido;
        this.edad = edad;
        this.especialidad = especialidad;
        this.sexo = sexo;
    }
    
//////////METODO PARA MOSTRAR LOS DATOS DE LOS MEDICOS VETERINARIOS
    public void mostrarDatos() {
        System.out.println("============================:");
        System.out.println("DATOS DEL MEDICO VETERINARIO:");
        System.out.println("Nombre: " + nombre);
        System.out.println("Apellido: " + apellido);
        System.out.println("Edad: " + edad);
        System.out.println("Especialidad: " + especialidad);
        System.out.println("Sexo: " + sexo);
        System.out.println("============================:");

    }
    
    ///////////METODOS PARA ACCEDER A LOS ATRIBUTOS
    public String getNombre() {
        return nombre;
    }

    public String getApellido() {
        return apellido;
    }

    public int getEdad() {
        return edad;
    }

    public String getEspecialidad() {
        return especialidad;
    }

    public String getSexo() {
        return sexo;
    }
}


 class Animales{

    static int length;
     
///////////ATRIBUTOS
    private String TipoAnimal;
    private String name;
    private String species;
    private int age;
    private String breed;
    private String gender; 

    public Animales(String TipoAnimal,String name, String species, int age, String breed, String gender) {
        this.name = name;
        this.species = species;
        this.age = age;
        this.breed = breed;
        this.gender = gender;
    }

    public String getTipoAnimal(){
    return TipoAnimal;
    
    }
    public String getName() {
        return name;
    }

    public String getSpecies() {
        return species;
    }

    public int getAge() {
        return age;
    }

    public String getBreed() {
        return breed;
    }

    public String getGender() {
        return gender;
    }
  
 public void mostrarDatos() {
        System.out.println("============================:");
        System.out.println("DATOS DEL ANIMAL :           ");
        System.out.println("TIPO DE ANIMAL: " + TipoAnimal);
        System.out.println("NOMBRE: " + name);
        System.out.println("ESPECIE: " + species);
        System.out.println("EDAD: " + age);
        System.out.println("RAZA: " + breed);
        System.out.println("RAZA: " + gender);
        System.out.println("============================:");

    }
}


// Clase CitaMedica
class CitaMedica {
   
    private LocalDateTime fechaHora;

    public CitaMedica( LocalDateTime fechaHora) {
       
        this.fechaHora = fechaHora;
    }

    // Método para mostrar los datos de la cita médica
    public void mostrarDatos() {
        System.out.println("\nDatos de la cita médica:");
        System.out.println("Fecha y hora: " + fechaHora.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm")));
    }
}



	

