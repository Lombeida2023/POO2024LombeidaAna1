package P1Lab1LombeidaAna;

import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Scanner;

public class main {

	 // Variables globales para almacenar datos de las opciones 1 y 2
    private static int cantidad;
 
    private static String[] nombres;
    private static String[] nombresAscendente;
    private static String[] nombresDescendente;

     
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		  Scanner scanner = new Scanner(System.in);
	        int menuOp = 0;

	        do {
	            System.out.println("==============================================");
	            System.out.println("MENU DE OPCIONES");
	            System.out.println("1. INGRESAR DATOS Y APLICAR FORMULAS DEL IVA");
	            System.out.println("2. INGRESAR ARREGLOS DE NOMBRES Y ORDENAR");
	            System.out.println("3. GUARDAR INFORMACION EN UN ARCHIVO");
	            System.out.println("4. SALIR");
	            System.out.println("INGRESA UNA OPCION");
	            System.out.println("==============================================");
	            menuOp = scanner.nextInt();

	            switch (menuOp) {
	                case 1:
	                    

	                    break;

	                case 2:
	                	

	                    break;

	                case 3:
	                    System.out.println("3. GUARDAR INFORMACION EN UN ARCHIVO CSV");
	                    guardarInformacionCSV();
	                    break;

	                case 4:
	                    System.out.println("4. MUCHASD GRACIAS, QUE TENGA UN BUEN DIA ");
	                    break;

	                default:
	                    System.out.println("OPCION INGRESADA ES INCORRECTA, VUELVA A INGRESAR UNA DENTRO DEL RANGO");
	            }

	        } while (menuOp != 5);

	    }
		
	  // Método para guardar información en un archivo CSV
    private static void guardarInformacionCSV() {
        // Verifica que nombresAscendente y nombresDescendente no sean nulos antes de guardarlos
        if (nombresAscendente == null || nombresDescendente == null) {
            System.out.println("No se puede guardar la información porque los nombres ordenados no se han inicializado.");
            return;
        }

        try (FileWriter writer = new FileWriter("informacion_guardada.csv")) {
            // Guardar información de la opción 1
          

            // Guardar información de la opción 2
            writer.write("Opción 2:\n");
            writer.write("Nombres en orden ascendente:\n");
            for (String nombre : nombresAscendente) {
                writer.write(nombre + "\n");
            }
            writer.write("\nNombres en orden descendente:\n");
            for (String nombre : nombresDescendente) {
                writer.write(nombre + "\n");
            }

            System.out.println("La información se ha guardado correctamente en 'informacion_guardada.csv'.");
        } catch (IOException e) {
            System.out.println("Error al guardar la información en el archivo CSV: " + e.getMessage());
        }
    }

    // Métodos de ordenamiento burbuja en orden ascendente y descendente
    public static void ordenarNombresAscendente(String[] nombres) {
        int cantidad = nombres.length;
        for (int i = 0; i < cantidad - 1; i++) {
            for (int j = 0; j < cantidad - i - 1; j++) {
                if (nombres[j].compareTo(nombres[j + 1]) > 0) {
                    // Intercambiar nombres[j] y nombres[j + 1]
                    String temp = nombres[j];
                    nombres[j] = nombres[j + 1];
                    nombres[j + 1] = temp;
                }
            }
        }
    }

    public static void ordenarNombresDescendente(String[] nombres) {
        int cantidad = nombres.length;
        for (int i = 0; i < cantidad - 1; i++) {
            for (int j = 0; j < cantidad - i - 1; j++) {
                if (nombres[j].compareTo(nombres[j + 1]) < 0) {
                    // Intercambiar nombres[j] y nombres[j + 1]
                    String temp = nombres[j];
                    nombres[j] = nombres[j + 1];
                    nombres[j + 1] = temp;
                }
            }
        }
    }
    
    
    
    public static void RegitrarMedicosVeterinarios() {
    	Scanner scanner = new Scanner (System.in);
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	
    }
    
    
////////METODO PARA EL ARREGLO DE NOMBRES 
    
public static void ArreglosNombres(){
        Scanner scanner  = new Scanner(System.in);

 do {
                 System.out.println("INGRESA LA CANTIDAD DE NOMBRES A INGRESAR");
  	         cantidad = scanner.nextInt();
  	         scanner.nextLine(); // Limpiar el buffer de entrada
                     if(cantidad<=0 || cantidad >=10 ) {
                     }	
                 }while(cantidad<=0 || cantidad >=10 );
                  
                    // Crear el arreglo de nombres
                    nombres = new String[cantidad];

                    // Llenar el arreglo de nombres
                    for (int i = 0; i < cantidad; i++) {
                        System.out.println("INGRESE EL NOMBRE " + (i + 1) + ": ");
                        nombres[i] = scanner.nextLine();
                    }

                    // Ordenar los nombres utilizando el método de burbuja de forma ascendente
                    ordenarNombresAscendente(nombres);
                    nombresAscendente = Arrays.copyOf(nombres, nombres.length);

                    // Mostrar los nombres ordenados de forma ascendente
                    System.out.println("\nNombres ordenados en forma ascendente:");
                    for (String nombre : nombresAscendente) {
                        System.out.println(nombre);
                    }

                    // Ordenar los nombres utilizando el método de burbuja de forma descendente
                    ordenarNombresDescendente(nombres);
                    nombresDescendente = Arrays.copyOf(nombres, nombres.length);

                    // Mostrar los nombres ordenados de forma descendente
                    System.out.println("\nNombres ordenados en forma descendente:");
                    for (String nombre : nombresDescendente) {
                        System.out.println(nombre);
                    }
}

 
}

	

